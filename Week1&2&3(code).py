# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1khPe3p26Jv22yKuRSxv_jvIXwqYLXllk
"""

import pandas as pd
import numpy as py
df = pd.read_csv('house_hold.csv')

#water usage for one year
df

#water usage for one month
df1=df[df['Month']==1]
df1

df1.head()

#checking is null values is there are not ->to clean the data
df1.isnull()

df1=df1.drop(columns=["Total_Usage(L)"])
df1

df1.isnull().sum()

#fill the null values
df1= df1.fillna(df1.mean(numeric_only=True))
df1

#add the total_usage coloumn
df1["total_usage"] = df1["Bathing(L)"] + df1["Cooking(L)"] + df1["Washing(L)"] + df1["Gardening(L)"] + df1["Drinking(L)"]
df1

df1.info()

df1.describe()

import matplotlib.pyplot as plt
import seaborn as sns

#Total water usage for every houshold that represent in bar chat
plt.figure(figsize=(10,6))
sns.barplot(x="Household", y="total_usage", data=df1)
plt.xticks(rotation=45)
plt.title("Total Water Usage per Household")
plt.show()

#Total water usage for every houshold that represent in pie chart
plt.figure(figsize=(8,8))
plt.pie( df1["total_usage"],labels=df1["Household"],autopct='%1.1f%%',startangle=140,shadow=True)
plt.title("Total Water Usage per Household")
plt.show()

plt.figure(figsize=(8,5))
sns.lineplot(x="Household", y="total_usage", data=df1, marker="o")
plt.xticks(rotation=45)
plt.title("Monthly Water Usage Trend")
plt.show()

#Average Water usage for every activity
activity_cols = ['Bathing(L)','Cooking(L)','Washing(L)','Gardening(L)','Drinking(L)']
df1[activity_cols].mean().plot(kind="pie", figsize=(8,5),autopct='%1.1f%%')
plt.title("Average Water Usage by Activity")
plt.ylabel("Liters")
plt.show()

#Data Normalization
from sklearn.preprocessing import MinMaxScaler, StandardScaler
activity_cols = ['Bathing(L)','Cooking(L)','Washing(L)','Gardening(L)','Drinking(L)','total_usage']
minmax_scaler = MinMaxScaler()
df_minmax = df1.copy()
df_minmax[activity_cols] = minmax_scaler.fit_transform(df1[activity_cols])
print("Min-Max Normalized Data:")
print(df_minmax)
standard_scaler = StandardScaler()
df_standard = df1.copy()
df_standard[activity_cols] = standard_scaler.fit_transform(df1[activity_cols])
print("\nStandardized Data:")
print(df_standard)
"""# -----------------------------**WEEK***-2-------------------------------"""
#Heatmap
plt.figure(figsize=(10,6))
sns.heatmap(df1.corr(numeric_only=True), annot=True, cmap="coolwarm")
plt.title("Correlation Heatmap")
plt.show()

# Distribution plots for numeric columns
for col in df1.select_dtypes(include=[py.number]).columns:
        plt.figure()
        sns.histplot(df1[col].dropna(), kde=True)
        plt.title(f"Distribution of {col}")
        plt.show()

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

# Assign weights to activities to calculate water_footprints
weights = {
    "Bathing(L)": 1.2,
    "Cooking(L)": 1.1,
    "Washing(L)": 1.0,
    "Gardening(L)": 0.8,
    "Drinking(L)": 1.5
}

df1["Water_Footprint"] = (
    df1["Bathing(L)"] * weights["Bathing(L)"] +
    df1["Cooking(L)"] * weights["Cooking(L)"] +
    df1["Washing(L)"] * weights["Washing(L)"] +
    df1["Gardening(L)"] * weights["Gardening(L)"] +
    df1["Drinking(L)"] * weights["Drinking(L)"]
)
df1

#Bar graph for Water_footprints
plt.figure(figsize=(8,8))
sns.barplot(x="Household", y="Water_Footprint", data=df1)
plt.xticks(rotation=45)
plt.title("Water Footprint per Household")
plt.show()

# Encode categorical variables
label_encoders = {}
for col in df1.select_dtypes(include=['object']).columns:
          le = LabelEncoder()
          df1[col] = le.fit_transform(df1[col].astype(str))
          label_encoders[col] = le
print("Categorical columns encoded successfully")
print(df1.head())

# Scale numeric features
scaler = StandardScaler()
numeric_cols = df1.select_dtypes(include=[py.number]).columns
df1[numeric_cols] = scaler.fit_transform(df1[numeric_cols])
print("Numeric columns scaled successfully")
print(df1.head())

#Training ML Model
X=df1[activity_cols]
y=df1["Water_Footprint"]

scalar=StandardScaler()
X_scaled=scalar.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
y_pred_lr = lr.predict(X_test)

# Random Forest
rf = RandomForestRegressor(random_state=42, n_estimators=100)
rf.fit(X_train, y_train)
y_pred_rf = rf.predict(X_test)

# Model Evaluation

print("Linear Regression Performance:")
print("MSE:", mean_squared_error(y_test, y_pred_lr))
print("R²:", r2_score(y_test, y_pred_lr))

print("Random Forest Performance:")
print("MSE:", mean_squared_error(y_test, y_pred_rf))
print("R²:", r2_score(y_test, y_pred_rf))
"""=============WEEK-3========"""
# Predict Water Footprint
y_pred = rf.predict(X_scaled)

df1["Predicted_Footprint"] = y_pred
print(df1[["Household", "Water_Footprint", "Predicted_Footprint"]].head())
top_households = df1.nlargest(3, "Predicted_Footprint")[["Household", "Predicted_Footprint"]]
print("High Footprint Households:")
print(top_households)
activity_cols = ["Bathing(L)", "Cooking(L)", "Washing(L)", "Gardening(L)", "Drinking(L)"]

df1["Max_Activity"] = df1[activity_cols].idxmax(axis=1)
print(df1[["Household", "Max_Activity"]].head())
def recommend(row):
    if row["Max_Activity"] == "Bathing(L)":
        return "Reduce shower time or use low-flow showerheads."
    elif row["Max_Activity"] == "Cooking(L)":
        return "Use water-efficient cooking methods."
    elif row["Max_Activity"] == "Washing(L)":
        return "Run washing machine with full loads only."
    elif row["Max_Activity"] == "Gardening(L)":
        return "Adopt drip irrigation / reuse household water for gardening."
    elif row["Max_Activity"] == "Drinking(L)":
        return "Check for leaks / encourage mindful drinking."
    else:
        return "Maintain current usage."
    
df1["Recommendation"] = df1.apply(recommend, axis=1)
print(df1[["Household", "Max_Activity", "Recommendation"]].head())
import matplotlib.pyplot as plt
import seaborn as sns

# Actual vs Predicted
plt.figure(figsize=(10,6))
sns.barplot(x="Household", y="Water_Footprint", data=df1, color="blue", label="Actual")
sns.barplot(x="Household", y="Predicted_Footprint", data=df1, color="red", alpha=0.5, label="Predicted")
plt.xticks(rotation=45)
plt.title("Actual vs Predicted Water Footprint per Household")
plt.legend()
plt.show()
    

